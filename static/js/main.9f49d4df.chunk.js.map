{"version":3,"sources":["components/main/Main.js","components/list/ListTemplate/ListTemplate.js","components/list/ListSearchBar/ListSearchBar.js","components/list/ListNavigation/ListNavigation.js","components/list/ListContents/ListContents.js","components/list/ListFetchMoreBar/ListFetchMoreBar.js","hooks/useIntersectionObserver.js","hooks/useHistoryState.js","hooks/useDebounce.js","containers/ListContainer.js","pages/Home.js","components/post/PostBackButton/PostBackButton.js","components/post/PostContents/PostContents.js","containers/PostContainer.js","pages/Post.js","pages/Error.js","App.js","styles/GlobalStyles.js","index.js"],"names":["MainElement","styled","main","Main","children","Section","section","ListTemplate","SearchBarWrapper","div","SearchBarInfo","p","SearchBar","figure","SearchBarIcon","i","SearchBarInput","input","ListSearchBar","searchWord","onFocusSearchBar","inputRef","onChangeSearchWord","onClick","xmlns","viewBox","d","placeholder","ref","defaultValue","onChange","e","Navigation","nav","Button","button","props","selected","ListNavigation","currentCategory","categoryList","onClickChangeCategory","map","elem","type","toUpperCase","List","ol","PostLink","routerLink","Post","li","PostNumber","span","PostTitle","PostContents","ListContents","data","pages","page","pageIndex","Fragment","to","id","title","content","Bar","ListFetchMoreBar","_","React","forwardRef","useIntersectionObserver","target","onIntersect","enabled","useEffect","observer","current","IntersectionObserver","isIntersecting","observe","disconnect","useHistoryState","initialState","key","history","useHistory","stateValue","location","state","useState","undefined","historyState","setHistoryState","setState","useCallback","replace","value","Function","useDebounce","callback","wait","timeoutId","args","window","clearTimeout","setTimeout","apply","ListContainer","setSearchWord","setCurrentCategory","useInfiniteQuery","name","category","search","a","pageParam","searchUrl","fetch","json","Object","assign","getNextPageParam","staleTime","Infinity","useFetchList","fetchNextPage","isFetchingNextPage","hasNextPage","pageRef","useRef","focus","Home","BackButton","PostBackButton","onClickBackPage","article","Title","h2","Content","PostContainer","postId","postType","useQuery","isLoading","goBack","pathname","split","qs","parse","Error","App","basename","process","exact","path","component","reset","css","GlobalStyles","styles","queryClient","QueryClient","ReactDOM","render","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.9f49d4df.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst MainElement = styled.main`\r\n  width: 1000px;\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Main = ({ children }) => {\r\n  return <MainElement>{children}</MainElement>;\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Section = styled.section``;\r\n\r\nconst ListTemplate = ({ children }) => {\r\n  return <Section>{children}</Section>;\r\n};\r\n\r\nexport default ListTemplate;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst SearchBarWrapper = styled.div`\r\n  padding: 2rem;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  appearance: none;\r\n`;\r\nconst SearchBarInfo = styled.p`\r\n  margin-bottom: 1rem;\r\n  font-size: 1.25rem;\r\n  color: grey;\r\n`;\r\nconst SearchBar = styled.figure`\r\n  padding: 1rem;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 3px;\r\n  user-select: none; // disabled caret\r\n\r\n  &:focus-within,\r\n  &:hover {\r\n    border: 1px solid blue;\r\n  }\r\n`;\r\nconst SearchBarIcon = styled.i`\r\n  display: inline;\r\n  margin-right: 0.5rem;\r\n  & > svg {\r\n    width: 1rem;\r\n    height: 1rem;\r\n  }\r\n`;\r\nconst SearchBarInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  outline: none;\r\n`;\r\n\r\nconst ListSearchBar = ({\r\n  searchWord,\r\n  onFocusSearchBar,\r\n  inputRef,\r\n  onChangeSearchWord,\r\n}) => {\r\n  return (\r\n    <SearchBarWrapper>\r\n      <SearchBarInfo>게시물을 검색해보세요</SearchBarInfo>\r\n      <SearchBar onClick={() => onFocusSearchBar()}>\r\n        <SearchBarIcon>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M23.809 21.646l-6.205-6.205c1.167-1.605 1.857-3.579 1.857-5.711 0-5.365-4.365-9.73-9.731-9.73-5.365 0-9.73 4.365-9.73 9.73 0 5.366 4.365 9.73 9.73 9.73 2.034 0 3.923-.627 5.487-1.698l6.238 6.238 2.354-2.354zm-20.955-11.916c0-3.792 3.085-6.877 6.877-6.877s6.877 3.085 6.877 6.877-3.085 6.877-6.877 6.877c-3.793 0-6.877-3.085-6.877-6.877z\" />\r\n          </svg>\r\n        </SearchBarIcon>\r\n        <SearchBarInput\r\n          placeholder=\"검색어를 입력하세요\"\r\n          ref={inputRef}\r\n          defaultValue={searchWord}\r\n          onChange={(e) => onChangeSearchWord(e)}\r\n        />\r\n      </SearchBar>\r\n    </SearchBarWrapper>\r\n  );\r\n};\r\n\r\nexport default ListSearchBar;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Navigation = styled.nav`\r\n  margin-top: 1rem;\r\n  border-bottom: 1px solid lightgrey;\r\n`;\r\nconst Button = styled.button`\r\n  border: none;\r\n  color: ${(props) => (props.selected ? \"blue\" : \"black\")};\r\n  background: none;\r\n  cursor: pointer;\r\n  padding: 1rem 0.75rem;\r\n  font-weight: bolder;\r\n  border-radius: 2px;\r\n  transition-duration: 0.5s;\r\n  &:hover {\r\n    color: skyblue;\r\n    background-color: #ece9e8;\r\n  }\r\n`;\r\nconst ListNavigation = ({\r\n  currentCategory,\r\n  categoryList,\r\n  onClickChangeCategory,\r\n}) => {\r\n  return (\r\n    <Navigation>\r\n      {categoryList.map((elem, i) => (\r\n        <Button\r\n          key={i}\r\n          onClick={() => onClickChangeCategory(elem.type)}\r\n          selected={elem.type === currentCategory}\r\n        >\r\n          {elem.type.toUpperCase()} Posts\r\n        </Button>\r\n      ))}\r\n    </Navigation>\r\n  );\r\n};\r\n\r\nexport default ListNavigation;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { Link as routerLink } from \"react-router-dom\";\r\n\r\nconst List = styled.ol`\r\n  margin-top: 1rem;\r\n  padding: 1rem 1.5rem;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 3px;\r\n  box-sizing: border-box;\r\n`;\r\nconst PostLink = styled(routerLink)`\r\n  text-decoration: none;\r\n  color: black;\r\n`;\r\nconst Post = styled.li`\r\n  padding: 1rem;\r\n  list-style: none;\r\n  transition-duration: 0.25s;\r\n  &:hover {\r\n    background: lightgrey;\r\n  }\r\n`;\r\nconst PostNumber = styled.span`\r\n  font-weight: bolder;\r\n  color: blue;\r\n`;\r\nconst PostTitle = styled.span`\r\n  font-weight: bolder;\r\n`;\r\nconst PostContents = styled.p`\r\n  margin: 0;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: -webkit-box;\r\n  line-height: 16px;\r\n  max-height: 48px;\r\n  -webkit-line-clamp: 3;\r\n  -webkit-box-orient: vertical;\r\n`;\r\n\r\nconst ListContents = ({ data }) => {\r\n  return (\r\n    <List>\r\n      {data.pages?.map((page, pageIndex) => (\r\n        <React.Fragment key={pageIndex}>\r\n          {page?.data?.map((elem, i) => (\r\n            <PostLink key={i} to={`/${elem.type}?id=${elem.id}`}>\r\n              <Post>\r\n                <PostNumber>{elem.id}. </PostNumber>\r\n                <PostTitle>{elem.title}</PostTitle>\r\n                <PostContents>{elem.content}</PostContents>\r\n              </Post>\r\n            </PostLink>\r\n          ))}\r\n        </React.Fragment>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ListContents;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Bar = styled.div`\r\n  width: 100%;\r\n  height: 1px;\r\n`;\r\n\r\nconst ListFetchMoreBar = (_, ref) => {\r\n  return <Bar ref={ref} />;\r\n};\r\n\r\nexport default React.forwardRef(ListFetchMoreBar);\r\n","import React from \"react\";\r\n\r\nconst useIntersectionObserver = ({ target, onIntersect, enabled = true }) => {\r\n  React.useEffect(() => {\r\n    if (!enabled) return;\r\n\r\n    let observer;\r\n\r\n    if (target.current) {\r\n      observer = new IntersectionObserver(([{ isIntersecting }]) => {\r\n        if (isIntersecting) onIntersect();\r\n      });\r\n      observer.observe(target.current);\r\n    }\r\n    return () => observer && observer.disconnect();\r\n  }, [enabled, onIntersect, target]);\r\n};\r\n\r\nexport default useIntersectionObserver;\r\n","import { useState, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useHistoryState = (initialState, key) => {\r\n  const history = useHistory();\r\n  const stateValue = history.location.state?.[key];\r\n\r\n  const [historyState, setHistoryState] = useState(\r\n    stateValue === undefined ? initialState : stateValue\r\n  );\r\n\r\n  const setState = useCallback(\r\n    (state, replace = false) => {\r\n      const value = state instanceof Function ? state(historyState) : state;\r\n\r\n      setHistoryState(() => value);\r\n      history.replace({\r\n        state: replace ? value : { ...history.location.state, [key]: value },\r\n      });\r\n    },\r\n    [history, historyState, key]\r\n  );\r\n\r\n  return [historyState, setState];\r\n};\r\n\r\nexport default useHistoryState;\r\n","const useDebounce = (callback, wait) => {\r\n  let timeoutId = null;\r\n  return (...args) => {\r\n    window.clearTimeout(timeoutId);\r\n    timeoutId = window.setTimeout(() => {\r\n      callback.apply(null, args);\r\n    }, wait);\r\n  };\r\n};\r\n\r\nexport default useDebounce;\r\n","import React from \"react\";\r\nimport { useInfiniteQuery } from \"react-query\";\r\n\r\nimport ListTemplate from \"../components/list/ListTemplate\";\r\nimport ListSearchBar from \"../components/list/ListSearchBar\";\r\nimport ListNavigation from \"../components/list/ListNavigation\";\r\nimport ListContents from \"../components/list/ListContents\";\r\nimport ListFetchMoreBar from \"../components/list/ListFetchMoreBar\";\r\nimport useIntersectionObserver from \"../hooks/useIntersectionObserver\";\r\nimport useHistoryState from \"../hooks/useHistoryState\";\r\nimport useDebounce from \"../hooks/useDebounce\";\r\n\r\nconst useFetchCategory = () => {\r\n  return [{ type: \"a\" }, { type: \"b\" }];\r\n};\r\n\r\nconst useFetchList = (currentCategory, searchWord) => {\r\n  const limitPage = 10;\r\n  const token = 865320;\r\n  return useInfiniteQuery(\r\n    /* NOTE QUERY KEYS : query keys를 기반으로 캐시할 지 정한다. \r\n       category, search가 변화할 때, 캐시에 있는 값을 기반으로 다시 서버에서 데이터를 요청할 지 정한다.\r\n       예를 들어, 사용자가 키보드 입력를 통해 검색어를 변경했다고 해보자.\r\n       keys = [{ name: \"fetchListData\", category: 'a', search: 'r' }] 와 같이 변경될 것이다.\r\n       서버로부터 category가 a이며, search가 r인 데이터를 가진 쿼리를 보낼 것이고,\r\n       서버는 해당 데이터를 보낼 것이다.\r\n       다시 keys = [{ name: \"fetchListData\", category: 'a', search: '' }]로 변경하고,\r\n       keys = [{ name: \"fetchListData\", category: 'a', search: 'r' }]로 변경해보자.\r\n       서버에 요청을 보내지 않고, 기존에 있던 데이터로 응답한다. \r\n    */\r\n    [{ name: \"fetchListData\", category: currentCategory, search: searchWord }],\r\n    /* NOTE QUERY FUNCTION - INFINITE : infinite scroll은 UI Pattern 중에서 매우 흔한 패턴이기 때문에 구현되어있다.\r\n        요청 : fetch('/api/projects?cursor=0')\r\n        응답 : { data: [...], nextCursor: 3}\r\n        위와 같은 방식으로 응답이 와야 다음 페이지가 어디로 갈지 정할 수 있다.\r\n        라이브러리에 있던 pageParam을 이용하여 다음 페이지를 정해준다.\r\n        반환 타입은 객체로, { data: fetchData, pageParam: pageParam + 1 } 와 같은 방식으로 반환한다.\r\n    */\r\n    /* NOTE 10 Page까지 모두 검색 후 2번 이상 내리면 지금까지의 모든 데이터와 함께 다시 처음부터 렌더링되는 오류 발생\r\n      - A hasNextPage boolean is now available and is true if getNextPageParam returns a value other than undefined  \r\n      - 간단하게 다음 페이지로 넘어가는 것을 금지할려면 undefined를 반환해야하는데, false를 반환했기 때문이다.\r\n\r\n      query option - `getNextPageParam: (lastGroup) => {\r\n        return lastGroup.pageParam ?? false;\r\n      },`\r\n      에서 다음과 같이 변경한다.\r\n      query option - `getNextPageParam: ({pageParam}) => pageParam`\r\n    */\r\n    async ({ pageParam = 0 }) => {\r\n      const searchUrl = searchWord === \"\" ? \"\" : `&search=${searchWord}`;\r\n      const data = await fetch(\r\n        `https://recruit-api.yonple.com/recruit/${token}/${currentCategory}-posts?page=${pageParam}${searchUrl}`\r\n      );\r\n      const json = await data.json();\r\n      return Object.assign(\r\n        {\r\n          data: json,\r\n        },\r\n        limitPage > pageParam ? { pageParam: pageParam + 1 } : {}\r\n      );\r\n    },\r\n    /* QUERY OPTIONS \r\n      - staleTime : 쿼리 데이터가 fresh 에서 stale로 전환되는데 걸리는 시간. 기본값은 0이다.\r\n        Infinity로 설정하면 쿼리 데이터는 직접 캐시를 무효화할 때까지 fresh 상태로 유지된다.\r\n      - getNextPageParam: 다음 페이지로 넘어갈 매개변수.\r\n    */\r\n    {\r\n      getNextPageParam: ({ pageParam }) => pageParam,\r\n      staleTime: Infinity,\r\n    }\r\n  );\r\n};\r\n\r\nconst ListContainer = () => {\r\n  const [searchWord, setSearchWord] = useHistoryState(\"\", \"searchWord\");\r\n  const onChangeSearchWord = useDebounce((e) => {\r\n    setSearchWord(e.target.value);\r\n  }, 150);\r\n  // History 기반으로 뒤로 가기 시 상태를 유지시킨다.\r\n  const [currentCategory, setCurrentCategory] = useHistoryState(\r\n    \"a\",\r\n    \"currentCategory\"\r\n  );\r\n  /* NOTE useInfiniteQuery return value\r\n     - data: object containing infinite query data\r\n     - fetchNextPage: Funtion\r\n     - isFetchingNextPage: booleans are now available to distinguish between a background refresh state and a loading more state\r\n     - hasNextPage: now available and is true if getNextPageParam returns a value other than undefined\r\n  */\r\n  const { data, fetchNextPage, isFetchingNextPage, hasNextPage } = useFetchList(\r\n    currentCategory,\r\n    searchWord\r\n  );\r\n\r\n  const categoryList = useFetchCategory();\r\n\r\n  const pageRef = React.useRef();\r\n  useIntersectionObserver({\r\n    target: pageRef,\r\n    onIntersect: fetchNextPage,\r\n    enabled: !isFetchingNextPage || hasNextPage,\r\n  });\r\n\r\n  const inputRef = React.useRef();\r\n  const onClickChangeCategory = (category) => {\r\n    setCurrentCategory(() => category);\r\n  };\r\n  const onFocusSearchBar = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <ListTemplate>\r\n      <ListSearchBar\r\n        searchWord={searchWord}\r\n        onFocusSearchBar={onFocusSearchBar}\r\n        inputRef={inputRef}\r\n        onChangeSearchWord={onChangeSearchWord}\r\n      />\r\n      <ListNavigation\r\n        currentCategory={currentCategory}\r\n        categoryList={categoryList}\r\n        onClickChangeCategory={onClickChangeCategory}\r\n      />\r\n      <ListContents data={data || []} />\r\n      <ListFetchMoreBar ref={pageRef} />\r\n    </ListTemplate>\r\n  );\r\n};\r\n\r\nexport default ListContainer;\r\n","import React from \"react\";\r\nimport Main from \"../components/main\";\r\nimport ListContainer from \"../containers/ListContainer\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Main>\r\n      <ListContainer />\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst BackButton = styled.button`\r\n  padding: 0.75rem 1.75rem;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background: #3649f7;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  transition-duration: 0.25s;\r\n  &:hover {\r\n    background: #5c6bf3;\r\n  }\r\n`;\r\n\r\nconst PostBackButton = ({ onClickBackPage }) => {\r\n  return <BackButton onClick={() => onClickBackPage()}>뒤로가기</BackButton>;\r\n};\r\n\r\nexport default PostBackButton;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Post = styled.article`\r\n  border: 1px solid lightgrey;\r\n  border-radius: 3px;\r\n  padding: 2rem;\r\n  margin-bottom: 1rem;\r\n`;\r\nconst Title = styled.h2`\r\n  font-size: 1.75rem;\r\n  text-align: center;\r\n  padding-bottom: 2rem;\r\n`;\r\nconst Content = styled.p`\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nconst PostContents = ({ data }) => {\r\n  return (\r\n    <Post>\r\n      <Title>{data?.title}</Title>\r\n      <Content>{data?.content}</Content>\r\n    </Post>\r\n  );\r\n};\r\n\r\nexport default PostContents;\r\n","import React from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport PostBackButton from \"../components/post/PostBackButton/PostBackButton\";\r\nimport PostContents from \"../components/post/PostContents/PostContents\";\r\n\r\nconst PostContainer = ({ postId, postType }) => {\r\n  const token = 865320;\r\n  const { data, isLoading } = useQuery(\r\n    [\"fetchPost\", { postType, id: postId }],\r\n    async () => {\r\n      const data = await fetch(\r\n        `https://recruit-api.yonple.com/recruit/${token}/${postType}-posts/${postId}`\r\n      );\r\n      const json = await data.json();\r\n      return json;\r\n    },\r\n    {\r\n      staleTime: Infinity,\r\n    }\r\n  );\r\n\r\n  const history = useHistory();\r\n  const onClickBackPage = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  if (isLoading) return <React.Fragment />;\r\n  return (\r\n    <React.Fragment>\r\n      <PostContents data={data} />\r\n      <PostBackButton onClickBackPage={onClickBackPage} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PostContainer;\r\n","import React from \"react\";\r\nimport qs from \"query-string\";\r\nimport Main from \"../components/main\";\r\nimport PostContainer from \"../containers/PostContainer\";\r\n\r\nconst Post = ({ location }) => {\r\n  const postType = location.pathname.split(\"/\")[1];\r\n  const { id } = qs.parse(location.search);\r\n\r\n  return (\r\n    <Main>\r\n      <PostContainer postId={id} postType={postType} />\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\n\r\nconst Error = () => {\r\n  return <div>ERROR</div>;\r\n};\r\n\r\nexport default Error;\r\n","import { Route, Switch, Router } from \"react-router-dom\";\nimport { Home, Post, Error } from \"./pages\";\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path={[\"/a\", \"/b\"]} component={Post} />\n        <Route component={Error} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { Global, css } from \"@emotion/react\";\r\n\r\nconst reset = css`\r\n  html,\r\n  body,\r\n  div,\r\n  span,\r\n  applet,\r\n  object,\r\n  iframe,\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6,\r\n  p,\r\n  blockquote,\r\n  pre,\r\n  a,\r\n  abbr,\r\n  acronym,\r\n  address,\r\n  big,\r\n  cite,\r\n  code,\r\n  del,\r\n  dfn,\r\n  em,\r\n  img,\r\n  ins,\r\n  kbd,\r\n  q,\r\n  s,\r\n  samp,\r\n  small,\r\n  strike,\r\n  strong,\r\n  sub,\r\n  sup,\r\n  tt,\r\n  var,\r\n  b,\r\n  u,\r\n  i,\r\n  center,\r\n  dl,\r\n  dt,\r\n  dd,\r\n  ol,\r\n  ul,\r\n  li,\r\n  fieldset,\r\n  form,\r\n  label,\r\n  legend,\r\n  table,\r\n  caption,\r\n  tbody,\r\n  tfoot,\r\n  thead,\r\n  tr,\r\n  th,\r\n  td,\r\n  article,\r\n  aside,\r\n  canvas,\r\n  details,\r\n  embed,\r\n  figure,\r\n  figcaption,\r\n  footer,\r\n  header,\r\n  hgroup,\r\n  menu,\r\n  nav,\r\n  output,\r\n  ruby,\r\n  section,\r\n  summary,\r\n  time,\r\n  mark,\r\n  audio,\r\n  video {\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    font-size: 100%;\r\n    font: inherit;\r\n    vertical-align: baseline;\r\n  }\r\n  /* HTML5 display-role reset for older browsers */\r\n  article,\r\n  aside,\r\n  details,\r\n  figcaption,\r\n  figure,\r\n  footer,\r\n  header,\r\n  hgroup,\r\n  menu,\r\n  nav,\r\n  section {\r\n    display: block;\r\n  }\r\n  body {\r\n    line-height: 1;\r\n  }\r\n  ol,\r\n  ul {\r\n    list-style: none;\r\n  }\r\n  blockquote,\r\n  q {\r\n    quotes: none;\r\n  }\r\n  blockquote:before,\r\n  blockquote:after,\r\n  q:before,\r\n  q:after {\r\n    content: \"\";\r\n    content: none;\r\n  }\r\n  table {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n  }\r\n`;\r\n\r\nconst GlobalStyles = () => {\r\n  return <Global styles={reset} />;\r\n};\r\n\r\nexport default GlobalStyles;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nimport App from \"./App\";\nimport GlobalStyles from \"./styles/GlobalStyles\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <QueryClientProvider client={queryClient}>\n    <GlobalStyles />\n    <App />\n  </QueryClientProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}